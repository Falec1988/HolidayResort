// <auto-generated />
using System;
using HolidayResort.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HolidayResort.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241011195319_AddEquipmentToDb")]
    partial class AddEquipmentToDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HolidayResort.Domain.Entities.Accommodation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SquareMeter")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Accommodations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Moguće je rezervirati noćenje s doručkom, polupansion ili puni pansion.",
                            ImageUrl = "https://placehold.co/600x400",
                            Name = "Soba",
                            Price = 60.0,
                            SquareMeter = 40,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Moguće je rezervirati noćenje s doručkom, polupansion ili puni pansion.",
                            ImageUrl = "https://placehold.co/600x400",
                            Name = "Bungalov",
                            Price = 80.0,
                            SquareMeter = 50,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Moguće je rezervirati noćenje s doručkom, polupansion ili puni pansion.",
                            ImageUrl = "https://placehold.co/600x400",
                            Name = "Apartman",
                            Price = 100.0,
                            SquareMeter = 60,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HolidayResort.Domain.Entities.AccommodationNumber", b =>
                {
                    b.Property<int>("AccommodationNo")
                        .HasColumnType("int");

                    b.Property<int>("AccommodationId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialDetails")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccommodationNo");

                    b.HasIndex("AccommodationId");

                    b.ToTable("AccommodationNumbers");

                    b.HasData(
                        new
                        {
                            AccommodationNo = 101,
                            AccommodationId = 1
                        },
                        new
                        {
                            AccommodationNo = 102,
                            AccommodationId = 1
                        },
                        new
                        {
                            AccommodationNo = 103,
                            AccommodationId = 1
                        },
                        new
                        {
                            AccommodationNo = 104,
                            AccommodationId = 1
                        },
                        new
                        {
                            AccommodationNo = 201,
                            AccommodationId = 2
                        },
                        new
                        {
                            AccommodationNo = 202,
                            AccommodationId = 2
                        },
                        new
                        {
                            AccommodationNo = 203,
                            AccommodationId = 2
                        },
                        new
                        {
                            AccommodationNo = 301,
                            AccommodationId = 3
                        },
                        new
                        {
                            AccommodationNo = 302,
                            AccommodationId = 3
                        });
                });

            modelBuilder.Entity("HolidayResort.Domain.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccommodationId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationId");

                    b.ToTable("Equipments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccommodationId = 1,
                            Name = "Bračni krevet"
                        },
                        new
                        {
                            Id = 2,
                            AccommodationId = 1,
                            Name = "Sef"
                        },
                        new
                        {
                            Id = 3,
                            AccommodationId = 1,
                            Name = "Fen"
                        },
                        new
                        {
                            Id = 4,
                            AccommodationId = 2,
                            Name = "Bračni krevet i sofa na razvlačenje"
                        },
                        new
                        {
                            Id = 5,
                            AccommodationId = 2,
                            Name = "Minibar"
                        },
                        new
                        {
                            Id = 6,
                            AccommodationId = 2,
                            Name = "Klima uređaj"
                        },
                        new
                        {
                            Id = 7,
                            AccommodationId = 3,
                            Name = "Bračni krevet, sofa i kauč na razvlačenje"
                        },
                        new
                        {
                            Id = 8,
                            AccommodationId = 3,
                            Name = "Perilica za pranje suđa"
                        },
                        new
                        {
                            Id = 9,
                            AccommodationId = 3,
                            Name = "Kuhinja"
                        });
                });

            modelBuilder.Entity("HolidayResort.Domain.Entities.AccommodationNumber", b =>
                {
                    b.HasOne("HolidayResort.Domain.Entities.Accommodation", "Accommodation")
                        .WithMany()
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");
                });

            modelBuilder.Entity("HolidayResort.Domain.Entities.Equipment", b =>
                {
                    b.HasOne("HolidayResort.Domain.Entities.Accommodation", "Accommodation")
                        .WithMany()
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");
                });
#pragma warning restore 612, 618
        }
    }
}
